# -*- coding: utf-8 -*-
"""Carclass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qE3r20AuZxvUGpBjHY5xNUNye5GB3fXV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('cars_class.csv')
df

df.head()

df.shape

df.values

df.nunique()

df.isnull().sum()

df.describe()

df.info()

df=df.drop(["ID"],axis=1) #[ID doesnt give much infromation, so we removed that]

X=df.iloc[:,0:-1]
y=df.iloc[:,-1]

"""DataVisualization"""

import seaborn as sns

sns.countplot(y)

"""Spliting train and test data"""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)

"""Machine Learning Techniques

1.Decision Tree
"""

from sklearn.tree import DecisionTreeClassifier

dtc=DecisionTreeClassifier(max_depth=5,random_state=0)

dtc.fit(X_train,y_train)

print(dtc.score(X_train,y_train))

print(dtc.score(X_test,y_test))

"""2. **K**-Nearest Neighbors"""

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier(n_neighbors=2)

knn.fit(X_train,y_train)

print(knn.score(X_train,y_train))

print(knn.score(X_test,y_test))

"""3.Support Vector Classification

"""

from sklearn.svm import SVC

SVC= SVC(random_state=100,kernel='linear')

SVC.fit(X_train,y_train)

SVC.score(X_train,y_train)

SVC.score(X_test,y_test)

"""4.Random Forest"""

from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier(criterion="entropy",max_depth=5,min_samples_split=2)

rfc.fit(X_train,y_train)

print(rfc.score(X_train,y_train))

print(rfc.score(X_test,y_test))

"""5.Linear Regression """

from sklearn.linear_model import LinearRegression

linreg=LinearRegression(n_jobs=0)

linreg.fit(X_train,y_train)

print(linreg.score(X_train,y_train))

print(linreg.score(X_test,y_test))

"""Final_model
3.Support Vector Classification   (svc gives best scores, so am taking svc has my final_model)
"""

from sklearn.svm import SVC

SVC= SVC(random_state=100,kernel='linear')

SVC.fit(X_train,y_train)

SVC.score(X_train,y_train)

SVC.score(X_test,y_test)

"""**Accuracy"""

from sklearn.metrics import accuracy_score
y_pred=SVC.predict(X_test)
y_pred

accuracy_score(y_test, y_pred)

"""# F1 Score"""

from sklearn.metrics import f1_score

y_pred=SVC.predict(X_test)
y_pred

f1_score(y_test,y_pred,average="micro")

"""# Confusion Matrix"""

from sklearn.metrics import plot_confusion_matrix

plot_confusion_matrix(rfc,X_test,y_test)